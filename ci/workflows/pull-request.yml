anchors:
  - auto-retry: &auto-retry
      automatic:
        # Agent terminated because the AWS EC2 spot instance killed by AWS.
        - signal_reason: agent_stop
          limit: 3
  - plugins:
    - cargo-cache: &cargo-cache
        nienbo/cache#v2.4.20:
          id: cargo
          key: "v1-cache-{{ id }}-{{ runner.os }}-{{ checksum 'Cargo.lock' }}"
          restore-keys:
            - "v1-cache-{{ id }}-{{ runner.os }}-"
            - "v1-cache-{{ id }}-"
          backend: s3
          s3:
            bucket: rw-ci-cache-bucket
            args: "--no-progress"
          paths:
            - ".cargo/registry/index"
            - ".cargo/registry/cache"
            - ".cargo/git"
    # we need to override args, so didn't include image here in the anchor
    - docker-compose: &docker-compose
        run: rw-build-env
        config: ci/docker-compose.yml
        mount-buildkite-agent: true

other-sql-backend: &other-sql-backend
  matrix:
    setup:
      label: [""]
      endpoint: [""]
    adjustments:
      - with:
          label: ""
          endpoint: ""
        skip: true # hack
      - with:
          label: "postgres"
          # PGPASSWORD=postgres psql -h db -p 5432 -U postgres -d rwmeta
          endpoint: "postgres://postgres:postgres@db:5432/rwmeta"
      - with:
          label: "mysql"
          # mysql -h mysql-meta -P 3306 -u root -p123456 -D rwmeta
          endpoint: "mysql://root:123456@mysql-meta:3306/rwmeta"
  env:
    RISEDEV_SQL_ENDPOINT: "{{matrix.endpoint}}"


steps:
  - label: "check ci image rebuild"
    plugins:
      - monorepo-diff#v1.2.0:
          diff: "git diff --name-only origin/main"
          watch:
            - path: "ci/build-ci-image.sh"
              config:
                command: "ci/build-ci-image.sh"
                label: "ci build images"
  - wait

#  - label: "build"
#    command: "ci/scripts/build.sh -p ci-dev"
#    key: "build"
#    plugins:
#      - *cargo-cache
#      - docker-compose#v5.5.0: *docker-compose
#    timeout_in_minutes: 15
#    retry: *auto-retry
#
#  - label: "build other components"
#    command: "ci/scripts/build-other.sh"
#    key: "build-other"
#    plugins:
#      - *cargo-cache
#      - seek-oss/aws-sm#v2.3.2:
#          env:
#            GITHUB_TOKEN: github-token
#      - docker-compose#v5.5.0:
#          <<: *docker-compose
#          environment:
#          - GITHUB_TOKEN
#    timeout_in_minutes: 14
#    retry: *auto-retry

  - label: "build (deterministic simulation)"
    command: "ci/scripts/build-simulation.sh"
    key: "build-simulation"
    plugins:
      - *cargo-cache
      - docker-compose#v5.5.0: *docker-compose
    retry: *auto-retry

  # Ddl statements will randomly run with background_ddl.
  - label: "0background_ddl, arrangement_backfill recovery test (madsim)"
    key: "0background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=20 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry
  # Ddl statements will randomly run with background_ddl.
  - label: "1background_ddl, arrangement_backfill recovery test (madsim)"
    key: "1background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=40 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry
  # Ddl statements will randomly run with background_ddl.
  - label: "2background_ddl, arrangement_backfill recovery test (madsim)"
    key: "2background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=60 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry
  # Ddl statements will randomly run with background_ddl.
  - label: "3background_ddl, arrangement_backfill recovery test (madsim)"
    key: "3background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=80 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry
  # Ddl statements will randomly run with background_ddl.
  - label: "4background_ddl, arrangement_backfill recovery test (madsim)"
    key: "4background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=100 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry
  # Ddl statements will randomly run with background_ddl.
  - label: "5background_ddl, arrangement_backfill recovery test (madsim)"
    key: "5background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=120 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry
  # Ddl statements will randomly run with background_ddl.
  - label: "6background_ddl, arrangement_backfill recovery test (madsim)"
    key: "6background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=140 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry
  # Ddl statements will randomly run with background_ddl.
  - label: "7background_ddl, arrangement_backfill recovery test (madsim)"
    key: "7background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=160 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry
  # Ddl statements will randomly run with background_ddl.
  - label: "8background_ddl, arrangement_backfill recovery test (madsim)"
    key: "8background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=180 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry
  # Ddl statements will randomly run with background_ddl.
  - label: "9background_ddl, arrangement_backfill recovery test (madsim)"
    key: "9background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=200 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry
  # Ddl statements will randomly run with background_ddl.
  - label: "10background_ddl, arrangement_backfill recovery test (madsim)"
    key: "10background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=220 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry
  # Ddl statements will randomly run with background_ddl.
  - label: "11background_ddl, arrangement_backfill recovery test (madsim)"
    key: "11background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=240 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry
  # Ddl statements will randomly run with background_ddl.
  - label: "12background_ddl, arrangement_backfill recovery test (madsim)"
    key: "12background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=260 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry
  # Ddl statements will randomly run with background_ddl.
  - label: "13background_ddl, arrangement_backfill recovery test (madsim)"
    key: "13background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=280 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry
  # Ddl statements will randomly run with background_ddl.
  - label: "14background_ddl, arrangement_backfill recovery test (madsim)"
    key: "14background-ddl-arrangement-backfill-recovery-test-deterministic"
    command: "TEST_NUM=300 KILL_RATE=1.0 BACKGROUND_DDL_RATE=0.8 USE_ARRANGEMENT_BACKFILL=true timeout 140m ci/scripts/deterministic-recovery-test.sh"
    if: |
      !(build.pull_request.labels includes "ci/main-cron/run-selected") && build.env("CI_STEPS") == null
      || build.pull_request.labels includes "ci/run-recovery-test-deterministic-simulation"
      || build.env("CI_STEPS") =~ /(^|,)recovery-tests?-deterministic-simulation(,|$$)/
    depends_on: "build-simulation"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      # Only upload zipped files, otherwise the logs is too much.
      - ./ci/plugins/upload-failure-logs-zipped
    timeout_in_minutes: 70
    retry: *auto-retry


  # The following jobs are triggered only when PR has corresponding labels.

  # Generates cpu flamegraph env
  - label: "flamegraph-env-build"
    key: "flamegraph-env-build"
    command: "ci/scripts/flamegraph-env-build.sh"
    if: |
      build.pull_request.labels includes "cpu_flamegraph"
      || build.pull_request.labels includes "ci/run-cpu-flamegraph"
      || build.pull_request.labels includes "heap_flamegraph"
      || build.pull_request.labels includes "ci/run-heap-flamegraph"
      || build.env("CI_STEPS") =~ /(^|,)(cpu-flamegraph|heap-flamegraph)(,|$$)/
    plugins:
      - seek-oss/aws-sm#v2.3.2:
          env:
            GITHUB_TOKEN: github-token
      - docker-compose#v5.5.0:
          <<: *docker-compose
          environment:
          - GITHUB_TOKEN
    timeout_in_minutes: 20

  # Generates cpu flamegraph if label `cpu_flamegraph` is added to PR.
  - label: "Generate CPU flamegraph"
    command: "PULL_REQUEST=$BUILDKITE_PULL_REQUEST ci/scripts/gen-flamegraph.sh cpu"
    depends_on: "flamegraph-env-build"
    if: build.pull_request.labels includes "cpu_flamegraph" || build.pull_request.labels includes "ci/run-cpu-flamegraph" || build.env("CI_STEPS") =~ /(^|,)cpu-flamegraph(,|$$)/
    plugins:
      - seek-oss/aws-sm#v2.3.2:
          env:
            GITHUB_TOKEN: github-token
      - docker-compose#v5.5.0:
          <<: *docker-compose
          run: ci-flamegraph-env
          environment:
          - GITHUB_TOKEN
    # TODO(kwannoel): Here are the areas that can be further optimized:
    # - Nexmark event generation: ~3min for 100mil records.
    # - Generate Flamegraph: ~15min (see https://github.com/koute/not-perf/issues/30 on optimizing)
    # - Building RW artifacts: ~8min
    timeout_in_minutes: 540

  # Generates heap flamegraph if label `heap_flamegraph` is added to PR.
  - label: "Generate Heap flamegraph"
    command: "PULL_REQUEST=$BUILDKITE_PULL_REQUEST ci/scripts/gen-flamegraph.sh heap"
    depends_on: "flamegraph-env-build"

    if: build.pull_request.labels includes "heap_flamegraph" || build.pull_request.labels includes "ci/run-heap-flamegraph" || build.env("CI_STEPS") =~ /(^|,)heap-flamegraph(,|$$)/

    plugins:
      - seek-oss/aws-sm#v2.3.2:
          env:
            GITHUB_TOKEN: github-token
      - docker-compose#v5.5.0:
          <<: *docker-compose
          run: ci-flamegraph-env
          environment:
          - GITHUB_TOKEN
    # TODO(kwannoel): Here are the areas that can be further optimized:
    # - Nexmark event generation: ~3min for 100mil records.
    # - Generate Flamegraph: ~15min (see https://github.com/koute/not-perf/issues/30 on optimizing)
    # - Building RW artifacts: ~8min
    timeout_in_minutes: 60 # ~3-4 queries can run

  # Backwards compatibility tests
  - label: "Backwards compatibility tests"
    command: "VERSION_OFFSET={{matrix.version_offset}} RW_COMMIT=$BUILDKITE_COMMIT ci/scripts/backwards-compat-test.sh -p ci-dev"
    if: |
      build.pull_request.labels includes "breaking-change" ||
        build.pull_request.labels includes "ci/run-backwards-compat-tests" ||
        build.env("CI_STEPS") =~ /(^|,)backwards?-compat-tests?(,|$$)/
    depends_on:
      - "build"
    plugins:
      - docker-compose#v5.5.0:
          <<: *docker-compose
          run: source-test-env
          environment:
          - BUILDKITE_BRANCH
      - ./ci/plugins/upload-failure-logs
    matrix:
      setup:
        # Test the 4 latest versions against the latest main.
        # e.g.
        # 1: 2.0.0
        # 2: 1.1.1
        # 3: 1.0.1
        # 4: 1.0.0
        # It is ordered by the full version number, rather than minor / major version.
        # We can change to just be on major version in the future.
        version_offset:
          - "1"
          - "2"
          - "3"
          - "4"
    timeout_in_minutes: 25

  # Sqlsmith differential testing
  - label: "Sqlsmith Differential Testing"
    command: "ci/scripts/sqlsmith-differential-test.sh -p ci-dev"
    if: build.pull_request.labels includes "ci/run-sqlsmith-differential-tests" || build.env("CI_STEPS") =~ /(^|,)sqlsmith-differential-tests?(,|$$)/
    depends_on:
      - "build"
    plugins:
      - docker-compose#v5.5.0:
          <<: *docker-compose
          run: ci-flamegraph-env
    timeout_in_minutes: 40

  - label: "Backfill tests"
    command: "BUILDKITE=${BUILDKITE:-} ci/scripts/backfill-test.sh -p ci-dev"
    if: build.pull_request.labels includes "ci/run-backfill-tests" || build.env("CI_STEPS") =~ /(^|,)backfill-tests?(,|$$)/
    depends_on:
      - "build"
    plugins:
      - docker-compose#v5.5.0:
          <<: *docker-compose
          run: source-test-env
      - ./ci/plugins/upload-failure-logs
    timeout_in_minutes: 30

  - label: "e2e standalone binary test"
    command: "ci/scripts/e2e-test-serial.sh -p ci-dev -m standalone"
    if: build.pull_request.labels includes "ci/run-e2e-standalone-tests" || build.env("CI_STEPS") =~ /(^|,)e2e-standalone-tests?(,|$$)/
    depends_on:
      - "build"
      - "build-other"
      - "docslt"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      - ./ci/plugins/upload-failure-logs
    timeout_in_minutes: 40
    retry: *auto-retry

  - label: "e2e single-node binary test"
    command: "ci/scripts/e2e-test-serial.sh -p ci-dev -m single-node"
    if: build.pull_request.labels includes "ci/run-e2e-single-node-tests" || build.env("CI_STEPS") =~ /(^|,)e2e-single-node-tests?(,|$$)/
    depends_on:
      - "build"
      - "build-other"
      - "docslt"
    plugins:
      - docker-compose#v5.5.0: *docker-compose
      - ./ci/plugins/upload-failure-logs
    timeout_in_minutes: 30
    retry: *auto-retry

  - label: "end-to-end test ({{matrix.label}} backend)"
    <<: *other-sql-backend
    command: "ci/scripts/e2e-test-serial.sh -p ci-dev -m ci-3streaming-2serving-3fe"
    if: build.pull_request.labels includes "ci/run-e2e-test-other-backends" || build.env("CI_STEPS") =~ /(^|,)e2e-test-other-backends?(,|$$)/
    depends_on:
      - "build"
      - "build-other"
      - "docslt"
    plugins:
      - docker-compose#v5.5.0:
          <<: *docker-compose
          run: ci-standard-env
          propagate-environment: true
      - ./ci/plugins/upload-failure-logs
    timeout_in_minutes: 32
    retry: *auto-retry

  # FIXME(kwannoel): Let the github PR labeller label it, if sqlsmith source files has changes.
  - label: "fuzz test"
    command: "ci/scripts/pr-fuzz-test.sh -p ci-dev"
    if: build.pull_request.labels includes "ci/run-sqlsmith-fuzzing-tests" || build.env("CI_STEPS") =~ /(^|,)sqlsmith-fuzzing-tests?(,|$$)/
    depends_on:
      - "build"
      - "build-simulation"
    plugins:
      - ./ci/plugins/swapfile
      - docker-compose#v5.5.0: *docker-compose
      - ./ci/plugins/upload-failure-logs
    timeout_in_minutes: 15
    retry: *auto-retry

  - label: "deterministic fuzz test"
    command: "ci/scripts/run-deterministic-fuzz-test.sh -p ci-dev"
    if: build.pull_request.labels includes "ci/run-deterministic-sqlsmith-fuzzing-tests" || build.env("CI_STEPS") =~ /(^|,)deterministic-sqlsmith-fuzzing-tests?(,|$$)/
    depends_on:
      - "build-simulation"
    plugins:
      - ./ci/plugins/swapfile
      - docker-compose#v5.5.0: *docker-compose
      - ./ci/plugins/upload-failure-logs
    timeout_in_minutes: 15
    retry: *auto-retry

  - label: "enable ci/pr/run-selected only in draft PRs"
    if: build.pull_request.labels includes "ci/pr/run-selected" && !build.pull_request.draft
    commands:
      - echo "ci/pr/run-selected is only usable for draft Pull Requests"
      - exit 1

  - label: "micro benchmark"
    command: "ci/scripts/run-micro-benchmarks.sh"
    key: "run-micro-benchmarks"
    if: build.pull_request.labels includes "ci/run-micro-benchmarks" || build.env("CI_STEPS") =~ /(^|,)micro-benchmarks?(,|$$)/
    plugins:
      - docker-compose#v5.5.0: *docker-compose
    timeout_in_minutes: 60
    retry: *auto-retry

  - label: "upload micro-benchmark"
    if: build.pull_request.labels includes "ci/run-upload-micro-benchmark" || build.env("CI_STEPS") =~ /(^|,)upload-micro-benchmarks?(,|$$)/
    command:
      - "BUILDKITE_BUILD_NUMBER=$BUILDKITE_BUILD_NUMBER ci/scripts/upload-micro-bench-results.sh"
    depends_on: "run-micro-benchmarks"
    plugins:
      - seek-oss/aws-sm#v2.3.2:
          env:
            BUILDKITE_TOKEN: buildkite_token
            GITHUB_TOKEN: github-token
      - docker-compose#v5.5.0:
          <<: *docker-compose
          environment:
          - BUILDKITE_TOKEN
          - GITHUB_TOKEN
    timeout_in_minutes: 5
