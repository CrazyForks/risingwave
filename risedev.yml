# The schema for RiseDev configuration files is defined under `src/risedevtool/schemas`.
#
# You can add the following section to `.vscode/settings.json` to get hover support in VS Code:
#
# ```
#     "yaml.schemas": {
#         "src/risedevtool/schemas/risedev.json": "risedev.yml",
#         "src/risedevtool/schemas/risedev-profiles.user.json": "risedev-profiles.user.yml"
#     }
# ```

profile:
  #################################################
  ### Configuration profiles used by developers ###
  #################################################

  # The default configuration will start 1 compute node, 1 meta node and 1 frontend.
  default:
    # Specify a configuration file to override the default settings
    # config-path: src/config/example.toml
    steps:
      # If you want to use the local s3 storage, enable the following line
      # - use: minio

      # If you want to use aws-s3, configure AK and SK in env var and enable the following lines:
      # - use: aws-s3
      #   bucket: test-bucket

      # if you want to enable etcd backend, uncomment the following lines.
      # - use: etcd
      #   unsafe-no-fsync: true

      # If you want to enable metrics or tracing, uncomment the following lines.
      # - use: prometheus  # metrics
      # - use: tempo       # tracing
      # - use: grafana     # visualization

      - use: meta-node
      - use: compute-node
      - use: frontend

      # If you want to enable compactor, uncomment the following line, and enable either minio or aws-s3 as well.
      # - use: compactor

      # If you want to create source from Kafka, uncomment the following lines
      # Note that kafka depends on zookeeper, so zookeeper must be started beforehand.
      # - use: zookeeper
      #   persist-data: true
      # - use: kafka
      #   persist-data: true

  default-v6:
    steps:
      - use: meta-node
        address: "[::1]"
        listen-address: "[::]"
      - use: compute-node
        address: "[::1]"
        listen-address: "[::]"
      - use: frontend
        address: "[::1]"
        listen-address: "[::]"

  # The minimum config to use with risectl.
  for-ctl:
    steps:
      - use: minio
      - use: meta-node
      - use: compute-node
      - use: frontend
      - use: compactor

  # `dev-compute-node` have the same settings as default except the compute node will be started by user.
  dev-compute-node:
    steps:
      - use: meta-node
      - use: compute-node
        user-managed: true
      - use: frontend

  dev-frontend:
    steps:
      - use: meta-node
      - use: compute-node
      - use: frontend
        user-managed: true

  dev-meta:
    steps:
      - use: meta-node
        user-managed: true
      - use: compute-node
      - use: frontend

  # You can use this in combination with the virtual compactor
  # provided in https://github.com/risingwavelabs/risingwave-extensions
  dev-compactor:
    steps:
      - use: minio
      - use: meta-node
      - use: compute-node
      - use: frontend
      - use: compactor
        user-managed: true

  full:
    steps:
      - use: minio
      - use: etcd
      - use: meta-node
      - use: compute-node
      - use: frontend
      - use: compactor
      - use: prometheus
      - use: grafana
      - use: zookeeper
        persist-data: true
      - use: kafka
        persist-data: true

  standalone-full-peripherals:
    steps:
      - use: minio
      - use: etcd
      - use: meta-node
        user-managed: true
      - use: compute-node
        user-managed: true
      - use: frontend
        user-managed: true
      - use: compactor
        user-managed: true
      - use: prometheus
      - use: grafana
      - use: zookeeper
        persist-data: true
      - use: kafka
        persist-data: true

  standalone-minio-etcd:
    steps:
      - use: minio
      - use: etcd
      - use: meta-node
        user-managed: true
      - use: compute-node
        user-managed: true
      - use: frontend
        user-managed: true
      - use: compactor
        user-managed: true

  standalone-minio-etcd-compactor:
    steps:
      - use: minio
      - use: etcd
      - use: meta-node
        user-managed: true
      - use: compute-node
        user-managed: true
      - use: frontend
        user-managed: true
      - use: compactor

  hdfs:
    steps:
      # - use: etcd
      - use: meta-node
      - use: compute-node
      - use: frontend
      # If you want to use hdfs as storage backend, configure hdfs namenode:
      - use: opendal
        engine: hdfs
        namenode: "127.0.0.1:9000"
      - use: compactor
      # - use: prometheus
      # - use: grafana
  fs:
    steps:
      # - use: etcd
      - use: meta-node
      - use: compute-node
      - use: frontend
      - use: opendal
        engine: fs
      - use: compactor
      # - use: prometheus
      # - use: grafana
  webhdfs:
    steps:
      # - use: etcd
      - use: meta-node
      - use: compute-node
      - use: frontend
      # If you want to use webhdfs as storage backend, configure hdfs namenode:
      - use: opendal
        engine: webhdfs
        namenode: "127.0.0.1:9870"
      - use: compactor
      # - use: prometheus
      # - use: grafana

  gcs:
    steps:
      # - use: etcd
      - use: meta-node
      - use: compute-node
      - use: frontend
      # If you want to use google cloud storage as storage backend, configure bucket name:
      - use: opendal
        engine: gcs
        bucket: bucket-name
      - use: compactor
      # - use: prometheus
      # - use: grafana
  obs:
    steps:
      # - use: etcd
      - use: meta-node
      - use: compute-node
      - use: frontend
      # If you want to use obs as storage backend, configure bucket name:
      - use: opendal
        engine: obs
        bucket: bucket-name
      - use: compactor
      # - use: prometheus
      # - use: grafana

  oss:
    steps:
      # - use: etcd
      - use: meta-node
      - use: compute-node
      - use: frontend
      # If you want to use oss as storage backend, configure bucket name:
      - use: opendal
        engine: oss
        bucket: bucket-name
      - use: compactor
      # - use: prometheus
      # - use: grafana

  azblob:
    steps:
      # - use: etcd
      - use: meta-node
      - use: compute-node
      - use: frontend
      # If you want to use azblob as storage backend, configure bucket(container) name:
      - use: opendal
        engine: azblob
        bucket: test-bucket
      - use: compactor
      # - use: prometheus
      # - use: grafana

  full-benchmark:
    steps:
      - use: minio
      - use: etcd
      - use: meta-node
      - use: compute-node
      - use: frontend
      - use: compactor
      - use: prometheus
        remote-write: true
        remote-write-region: "ap-southeast-1"
        remote-write-url: "https://aps-workspaces.ap-southeast-1.amazonaws.com/workspaces/ws-f3841dad-6a5c-420f-8f62-8f66487f512a/api/v1/remote_write"
      - use: grafana
      - use: zookeeper
        persist-data: true
      - use: kafka
        persist-data: true

  3etcd-3meta:
    steps:
      - use: minio
      - use: etcd
        unsafe-no-fsync: true
        port: 2388
        peer-port: 2389
        exporter-port: 2379
      - use: etcd
        unsafe-no-fsync: true
        port: 12388
        peer-port: 12389
        exporter-port: 12379
      - use: etcd
        unsafe-no-fsync: true
        port: 22388
        peer-port: 22389
        exporter-port: 22379
      - use: meta-node
        port: 5690
        dashboard-port: 5691
        exporter-port: 1250
      - use: meta-node
        port: 15690
        dashboard-port: 15691
        exporter-port: 11250
      - use: meta-node
        port: 25690
        dashboard-port: 25691
        exporter-port: 21250
      - use: compactor

  3meta:
    steps:
      - use: meta-node
        port: 5690
        dashboard-port: 5691
        exporter-port: 1250
      - use: meta-node
        port: 15690
        dashboard-port: 15691
        exporter-port: 11250
      - use: meta-node
        port: 25690
        dashboard-port: 25691
        exporter-port: 21250

  3etcd-3meta-1cn-1fe:
    steps:
      - use: minio
      - use: etcd
        unsafe-no-fsync: true
        port: 2388
        peer-port: 2389
        exporter-port: 2379
      - use: etcd
        unsafe-no-fsync: true
        port: 12388
        peer-port: 12389
        exporter-port: 12379
      - use: etcd
        unsafe-no-fsync: true
        port: 22388
        peer-port: 22389
        exporter-port: 22379
      - use: meta-node
        port: 5690
        dashboard-port: 5691
        exporter-port: 1250
      - use: meta-node
        port: 15690
        dashboard-port: 15691
        exporter-port: 11250
      - use: meta-node
        port: 25690
        dashboard-port: 25691
        exporter-port: 21250
      - use: compactor
      - use: compute-node
      - use: frontend

  meta-1cn-1fe-sqlite:
    steps:
      - use: minio
      - use: sqlite
      - use: meta-node
        port: 5690
        dashboard-port: 5691
        exporter-port: 1250
      - use: compactor
      - use: compute-node
      - use: frontend

  meta-1cn-1fe-sqlite-with-recovery:
    config-path: src/config/ci-recovery.toml
    steps:
      - use: minio
      - use: sqlite
      - use: meta-node
        port: 5690
        dashboard-port: 5691
        exporter-port: 1250
      - use: compactor
      - use: compute-node
      - use: frontend

  java-binding-demo:
    steps:
      - use: minio
        address: "127.0.0.1"
        port: 9301
        root-user: hummockadmin
        root-password: hummockadmin
        hummock-bucket: hummock001
      - use: meta-node
        address: "127.0.0.1"
        port: 5690
      - use: compute-node
      - use: frontend
      - use: compactor

  ci-gen-cpu-flamegraph:
    steps:
      # NOTE(kwannoel): We do not use aws-s3 here, to avoid
      # contention over s3 bucket when multiple benchmarks at run at once.
      - use: minio
      - use: etcd
      - use: meta-node
      - use: compute-node
        parallelism: 8
      - use: frontend
      - use: compactor
      - use: prometheus
      - use: grafana
      # Do not use kafka and zookeeper here, we will spawn it separately,
      # so we don't have to re-generate data each time.
      # - use: zookeeper
      #   persist-data: true
      # RW will still be ale to talk to it.
      # - use: kafka
      #   port: 9092
      #   persist-data: true

  #################################
  ### Configurations used on CI ###
  #################################

  ci-1cn-1fe:
    config-path: src/config/ci.toml
    steps:
      - use: minio
      - use: etcd
        unsafe-no-fsync: true
      - use: meta-node
      - use: compute-node
        enable-tiered-cache: true
      - use: frontend
      - use: compactor

  ci-3cn-1fe:
    config-path: src/config/ci.toml
    steps:
      - use: minio
      - use: etcd
        unsafe-no-fsync: true
      - use: meta-node
      - use: compute-node
        port: 5687
        exporter-port: 1222
        enable-tiered-cache: true
      - use: compute-node
        port: 5688
        exporter-port: 1223
        enable-tiered-cache: true
      - use: compute-node
        port: 5689
        exporter-port: 1224
        enable-tiered-cache: true
      - use: frontend
      - use: compactor

  ci-3cn-1fe-with-monitoring:
    config-path: src/config/ci.toml
    steps:
      - use: minio
      - use: etcd
        unsafe-no-fsync: true
      - use: meta-node
      - use: compute-node
        port: 5687
        exporter-port: 1222
        enable-tiered-cache: true
      - use: compute-node
        port: 5688
        exporter-port: 1223
        enable-tiered-cache: true
      - use: compute-node
        port: 5689
        exporter-port: 1224
        enable-tiered-cache: true
      - use: frontend
      - use: compactor
      - use: prometheus
      - use: grafana

  ci-3cn-1fe-with-minio-rate-limit:
    config-path: src/config/ci.toml
    steps:
      - use: minio
        api-requests-max: 30
        api-requests-deadline: 3s
      - use: etcd
        unsafe-no-fsync: true
      - use: meta-node
      - use: compute-node
        port: 5687
        exporter-port: 1222
        enable-tiered-cache: true
      - use: compute-node
        port: 5688
        exporter-port: 1223
        enable-tiered-cache: true
      - use: compute-node
        port: 5689
        exporter-port: 1224
        enable-tiered-cache: true
      - use: frontend
      - use: compactor

  ci-3cn-1fe-with-monitoring-and-minio-rate-limit:
    config-path: src/config/ci.toml
    steps:
      - use: minio
        api-requests-max: 30
        api-requests-deadline: 2s
      - use: etcd
        unsafe-no-fsync: true
      - use: meta-node
      - use: compute-node
        port: 5687
        exporter-port: 1222
        enable-tiered-cache: true
      - use: compute-node
        port: 5688
        exporter-port: 1223
        enable-tiered-cache: true
      - use: compute-node
        port: 5689
        exporter-port: 1224
        enable-tiered-cache: true
      - use: frontend
      - use: compactor
      - use: prometheus
      - use: grafana

  ci-3cn-3fe:
    config-path: src/config/ci.toml
    steps:
      - use: minio
      - use: etcd
        unsafe-no-fsync: true
      - use: meta-node
      - use: compute-node
        port: 5687
        exporter-port: 1222
        enable-tiered-cache: true
      - use: compute-node
        port: 5688
        exporter-port: 1223
        enable-tiered-cache: true
      - use: compute-node
        port: 5689
        exporter-port: 1224
        enable-tiered-cache: true
      - use: frontend
        port: 4565
        exporter-port: 2222
        health-check-port: 6786
      - use: frontend
        port: 4566
        exporter-port: 2223
        health-check-port: 6787
      - use: frontend
        port: 4567
        exporter-port: 2224
        health-check-port: 6788
      - use: compactor

  ci-3cn-3fe-in-memory:
    config-path: src/config/ci-mem.toml
    steps:
      - use: meta-node
        enable-in-memory-kv-state-backend: true
      - use: compute-node
        port: 5687
        exporter-port: 1222
      - use: compute-node
        port: 5688
        exporter-port: 1223
      - use: compute-node
        port: 5689
        exporter-port: 1224
      - use: frontend
        port: 4565
        exporter-port: 2222
        health-check-port: 6786
      - use: frontend
        port: 4566
        exporter-port: 2223
        health-check-port: 6787
      - use: frontend
        port: 4567
        exporter-port: 2224
        health-check-port: 6788

  ci-3cn-3fe-opendal-fs-backend:
    config-path: src/config/ci.toml
    steps:
      - use: etcd
        unsafe-no-fsync: true
      - use: meta-node
      - use: opendal
        engine: fs
        bucket: "/tmp/rw_ci"
      - use: compute-node
        port: 5687
        exporter-port: 1222
      - use: compute-node
        port: 5688
        exporter-port: 1223
      - use: compute-node
        port: 5689
        exporter-port: 1224
      - use: frontend
        port: 4565
        exporter-port: 2222
        health-check-port: 6786
      - use: frontend
        port: 4566
        exporter-port: 2223
        health-check-port: 6787
      - use: frontend
        port: 4567
        exporter-port: 2224
        health-check-port: 6788
      - use: compactor

  ci-3streaming-2serving-3fe:
    config-path: src/config/ci.toml
    steps:
      - use: minio
      - use: etcd
        unsafe-no-fsync: true
      - use: meta-node
      - use: compute-node
        port: 5687
        exporter-port: 1222
        enable-tiered-cache: true
        role: streaming
        parallelism: 4
      - use: compute-node
        port: 5688
        exporter-port: 1223
        enable-tiered-cache: true
        role: streaming
        parallelism: 4
      - use: compute-node
        port: 5689
        exporter-port: 1224
        enable-tiered-cache: true
        role: streaming
        parallelism: 4
      - use: compute-node
        port: 5685
        exporter-port: 1225
        enable-tiered-cache: true
        role: serving
        parallelism: 4
      - use: compute-node
        port: 5686
        exporter-port: 1226
        enable-tiered-cache: true
        role: serving
        parallelism: 8
      - use: frontend
        port: 4565
        exporter-port: 2222
        health-check-port: 6786
      - use: frontend
        port: 4566
        exporter-port: 2223
        health-check-port: 6787
      - use: frontend
        port: 4567
        exporter-port: 2224
        health-check-port: 6788
      - use: compactor

  ci-pubsub-kafka:
    config-path: src/config/ci.toml
    steps:
      - use: minio
      - use: etcd
        unsafe-no-fsync: true
      - use: meta-node
      - use: compute-node
        enable-tiered-cache: true
      - use: frontend
      - use: compactor
      - use: pubsub
        persist-data: true
      - use: kafka
        user-managed: true
        address: message_queue
        port: 29092

  ci-inline-source-test:
    config-path: src/config/ci.toml
    steps:
      - use: minio
      - use: etcd
        unsafe-no-fsync: true
      - use: meta-node
      - use: compute-node
        enable-tiered-cache: true
      - use: frontend
      - use: compactor
      - use: pubsub
        persist-data: true
      - use: kafka
        user-managed: true
        address: message_queue
        port: 29092
      - use: mysql
        port: 3306
        address: mysql
        user: root
        password: 123456
        user-managed: true

  ci-redis:
    config-path: src/config/ci.toml
    steps:
      - use: minio
      - use: etcd
        unsafe-no-fsync: true
      - use: meta-node
      - use: compute-node
        enable-tiered-cache: true
      - use: frontend
      - use: compactor
      - use: redis

  ci-compaction-test:
    config-path: src/config/ci-compaction-test.toml
    steps:
      - use: minio
      - use: etcd
        unsafe-no-fsync: true
      - use: meta-node
      - use: compute-node
        enable-tiered-cache: true
        total-memory-bytes: 17179869184
      - use: frontend
      - use: compactor

  ci-1cn-1fe-with-recovery:
    config-path: src/config/ci-recovery.toml
    steps:
      - use: minio
      - use: etcd
      - use: meta-node
      - use: compute-node
        enable-tiered-cache: true
      - use: frontend
      - use: compactor

  ci-3cn-1fe-with-recovery:
    config-path: src/config/ci-recovery.toml
    steps:
      - use: minio
      - use: etcd
        unsafe-no-fsync: true
      - use: meta-node
      - use: compute-node
        port: 5687
        exporter-port: 1222
        enable-tiered-cache: true
      - use: compute-node
        port: 5688
        exporter-port: 1223
        enable-tiered-cache: true
      - use: compute-node
        port: 5689
        exporter-port: 1224
        enable-tiered-cache: true
      - use: frontend
      - use: compactor

  ci-1cn-1fe-kafka-with-recovery:
    config-path: src/config/ci-recovery.toml
    steps:
      - use: minio
      - use: etcd
      - use: meta-node
      - use: compute-node
        enable-tiered-cache: true
      - use: frontend
      - use: compactor
      - use: zookeeper
        persist-data: true
      - use: kafka
        persist-data: true

  ci-meta-backup-test-etcd:
    config-path: src/config/ci-meta-backup-test.toml
    steps:
      - use: etcd
      - use: minio
      - use: meta-node
      - use: compute-node
      - use: frontend
      - use: compactor

  ci-meta-backup-test-restore-etcd:
    config-path: src/config/ci-meta-backup-test.toml
    steps:
      - use: etcd
      - use: minio

  ci-meta-backup-test-sql:
    config-path: src/config/ci-meta-backup-test.toml
    steps:
      - use: sqlite
      - use: minio
      - use: meta-node
      - use: compute-node
      - use: frontend
      - use: compactor

  ci-meta-backup-test-restore-sql:
    config-path: src/config/ci-meta-backup-test.toml
    steps:
      - use: sqlite
      - use: minio

  ci-meta-etcd-for-migration:
    config-path: src/config/ci.toml
    steps:
      - use: etcd

  ci-iceberg-test:
    config-path: src/config/ci-iceberg-test.toml
    steps:
      - use: minio
      - use: meta-node
      - use: compute-node
        enable-tiered-cache: true
      - use: frontend
      - use: compactor

  ci-sink-test:
    config-path: src/config/ci.toml
    steps:
      - use: minio
      - use: meta-node
      - use: compute-node
        enable-tiered-cache: true
      - use: frontend
      - use: compactor

  hummock-trace:
    config-path: src/config/hummock-trace.toml
    steps:
      - use: minio
      - use: meta-node
      - use: compute-node
      - use: frontend
      - use: compactor

  ci-backfill:
    config-path: "src/config/ci-backfill.toml"
    steps:
      - use: minio
      - use: etcd
      - use: meta-node
      - use: compute-node
      - use: frontend
      - use: compactor

  full-iceberg-bench:
    config-path: src/config/full-iceberg-bench.toml
    steps:
      - use: aws-s3
        bucket: renjie-iceberg-bench
      - use: etcd
      - use: meta-node
      - use: compute-node
      - use: frontend
      - use: compactor
      - use: prometheus
      - use: grafana

  full-with-batch-query-limit:
    config-path: src/config/full-with-batch-query-limit.toml
    steps:
      - use: minio
      - use: etcd
      - use: meta-node
      - use: compute-node
      - use: frontend
      - use: compactor
      - use: prometheus
      - use: grafana

# The `use` field specified in the above `risedev` section will refer to the templates below.
# DEPRECATED: moved to `risedev-template.libsonnet`
template: {}
