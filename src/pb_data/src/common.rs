// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Status {
    #[prost(enumeration = "status::Code", tag = "1")]
    pub code: i32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Nested message and enum types in `Status`.
pub mod status {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Code {
        Unspecified = 0,
        Ok = 1,
        UnknownWorker = 2,
    }
    impl Code {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "UNSPECIFIED",
                Self::Ok => "OK",
                Self::UnknownWorker => "UNKNOWN_WORKER",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "OK" => Some(Self::Ok),
                "UNKNOWN_WORKER" => Some(Self::UnknownWorker),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HostAddress {
    #[prost(string, tag = "1")]
    pub host: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub port: i32,
}
/// Encode which host machine an actor resides.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActorInfo {
    #[prost(uint32, tag = "1")]
    pub actor_id: u32,
    #[prost(message, optional, tag = "2")]
    pub host: ::core::option::Option<HostAddress>,
}
/// renamed from `ParallelUnit`
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActorLocation {
    #[prost(uint32, tag = "2")]
    pub worker_node_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkerNode {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(enumeration = "WorkerType", tag = "2")]
    pub r#type: i32,
    #[prost(message, optional, tag = "3")]
    pub host: ::core::option::Option<HostAddress>,
    #[prost(enumeration = "worker_node::State", tag = "4")]
    pub state: i32,
    #[prost(message, optional, tag = "6")]
    pub property: ::core::option::Option<worker_node::Property>,
    /// Ranges from 0 to 1023, used to generate the machine ID field in the global unique ID.
    #[prost(uint32, optional, tag = "7")]
    pub transactional_id: ::core::option::Option<u32>,
    /// Resource spec.
    /// It's populated by meta node with the value reported by worker node, when the worker node is added by meta node.
    /// It's not persistent in meta store.
    #[prost(message, optional, tag = "8")]
    pub resource: ::core::option::Option<worker_node::Resource>,
    /// Timestamp the worker node is added by meta node, in seconds.
    /// It's populated by meta node, when the worker node is added by meta node.
    /// It's not persistent in meta store.
    #[prost(uint64, optional, tag = "9")]
    pub started_at: ::core::option::Option<u64>,
}
/// Nested message and enum types in `WorkerNode`.
pub mod worker_node {
    /// Fields in `Property` that doesn't fit current worker type are just ignored by receiver.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Property {
        #[prost(bool, tag = "1")]
        pub is_streaming: bool,
        #[prost(bool, tag = "2")]
        pub is_serving: bool,
        #[prost(bool, tag = "3")]
        pub is_unschedulable: bool,
        /// This is used for frontend node to register its rpc address
        #[prost(string, tag = "4")]
        pub internal_rpc_host_addr: ::prost::alloc::string::String,
        #[prost(uint32, tag = "6")]
        pub parallelism: u32,
        /// resource group for scheduling
        #[prost(string, optional, tag = "7")]
        pub resource_group: ::core::option::Option<::prost::alloc::string::String>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Resource {
        #[prost(string, tag = "1")]
        pub rw_version: ::prost::alloc::string::String,
        #[prost(uint64, tag = "2")]
        pub total_memory_bytes: u64,
        #[prost(uint64, tag = "3")]
        pub total_cpu_cores: u64,
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        Unspecified = 0,
        Starting = 1,
        Running = 2,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "UNSPECIFIED",
                Self::Starting => "STARTING",
                Self::Running => "RUNNING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "STARTING" => Some(Self::Starting),
                "RUNNING" => Some(Self::Running),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Buffer {
    #[prost(enumeration = "buffer::CompressionType", tag = "1")]
    pub compression: i32,
    #[prost(bytes = "vec", tag = "2")]
    pub body: ::prost::alloc::vec::Vec<u8>,
}
/// Nested message and enum types in `Buffer`.
pub mod buffer {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CompressionType {
        Unspecified = 0,
        None = 1,
    }
    impl CompressionType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "UNSPECIFIED",
                Self::None => "NONE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "NONE" => Some(Self::None),
                _ => None,
            }
        }
    }
}
/// Vnode mapping for stream fragments. Stores mapping from virtual node to (worker id, slot index).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkerSlotMapping {
    #[prost(uint32, repeated, tag = "1")]
    pub original_indices: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint64, repeated, tag = "2")]
    pub data: ::prost::alloc::vec::Vec<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BatchQueryCommittedEpoch {
    #[prost(uint64, tag = "1")]
    pub epoch: u64,
    #[prost(uint64, tag = "2")]
    pub hummock_version_id: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BatchQueryEpoch {
    #[prost(oneof = "batch_query_epoch::Epoch", tags = "1, 2, 3, 4")]
    pub epoch: ::core::option::Option<batch_query_epoch::Epoch>,
}
/// Nested message and enum types in `BatchQueryEpoch`.
pub mod batch_query_epoch {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Epoch {
        #[prost(message, tag = "1")]
        Committed(super::BatchQueryCommittedEpoch),
        #[prost(uint64, tag = "2")]
        Current(u64),
        #[prost(uint64, tag = "3")]
        Backup(u64),
        #[prost(uint64, tag = "4")]
        TimeTravel(u64),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OrderType {
    #[prost(enumeration = "Direction", tag = "1")]
    pub direction: i32,
    #[prost(enumeration = "NullsAre", tag = "2")]
    pub nulls_are: i32,
}
/// Column index with an order type (ASC or DESC). Used to represent a sort key (`repeated ColumnOrder`).
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ColumnOrder {
    #[prost(uint32, tag = "1")]
    pub column_index: u32,
    #[prost(message, optional, tag = "2")]
    pub order_type: ::core::option::Option<OrderType>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Uint32Vector {
    #[prost(uint32, repeated, tag = "1")]
    pub data: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OptionalUint32 {
    #[prost(uint32, optional, tag = "1")]
    pub value: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OptionalUint64 {
    #[prost(uint64, optional, tag = "1")]
    pub value: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WorkerType {
    Unspecified = 0,
    Frontend = 1,
    ComputeNode = 2,
    RiseCtl = 3,
    Compactor = 4,
    Meta = 5,
}
impl WorkerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "WORKER_TYPE_UNSPECIFIED",
            Self::Frontend => "WORKER_TYPE_FRONTEND",
            Self::ComputeNode => "WORKER_TYPE_COMPUTE_NODE",
            Self::RiseCtl => "WORKER_TYPE_RISE_CTL",
            Self::Compactor => "WORKER_TYPE_COMPACTOR",
            Self::Meta => "WORKER_TYPE_META",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WORKER_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "WORKER_TYPE_FRONTEND" => Some(Self::Frontend),
            "WORKER_TYPE_COMPUTE_NODE" => Some(Self::ComputeNode),
            "WORKER_TYPE_RISE_CTL" => Some(Self::RiseCtl),
            "WORKER_TYPE_COMPACTOR" => Some(Self::Compactor),
            "WORKER_TYPE_META" => Some(Self::Meta),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Direction {
    Unspecified = 0,
    Ascending = 1,
    Descending = 2,
}
impl Direction {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "DIRECTION_UNSPECIFIED",
            Self::Ascending => "DIRECTION_ASCENDING",
            Self::Descending => "DIRECTION_DESCENDING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DIRECTION_UNSPECIFIED" => Some(Self::Unspecified),
            "DIRECTION_ASCENDING" => Some(Self::Ascending),
            "DIRECTION_DESCENDING" => Some(Self::Descending),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NullsAre {
    Unspecified = 0,
    Largest = 1,
    Smallest = 2,
}
impl NullsAre {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "NULLS_ARE_UNSPECIFIED",
            Self::Largest => "NULLS_ARE_LARGEST",
            Self::Smallest => "NULLS_ARE_SMALLEST",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NULLS_ARE_UNSPECIFIED" => Some(Self::Unspecified),
            "NULLS_ARE_LARGEST" => Some(Self::Largest),
            "NULLS_ARE_SMALLEST" => Some(Self::Smallest),
            _ => None,
        }
    }
}
