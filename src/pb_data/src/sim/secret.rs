// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecretMetaBackend {
    #[prost(bytes = "vec", tag = "1")]
    pub value: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecretHashicropValutBackend {
    #[prost(string, tag = "1")]
    pub host: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub vault_token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Secret {
    /// the message is stored in meta as encrypted bytes and is interpreted as bytes by catalog
    #[prost(oneof = "secret::SecretBackend", tags = "1, 2")]
    pub secret_backend: ::core::option::Option<secret::SecretBackend>,
}
/// Nested message and enum types in `Secret`.
pub mod secret {
    /// the message is stored in meta as encrypted bytes and is interpreted as bytes by catalog
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum SecretBackend {
        #[prost(message, tag = "1")]
        Meta(super::SecretMetaBackend),
        #[prost(message, tag = "2")]
        HashicorpVault(super::SecretHashicropValutBackend),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SecretRef {
    #[prost(uint32, tag = "1")]
    pub secret_id: u32,
    #[prost(enumeration = "secret_ref::RefAsType", tag = "2")]
    pub ref_as: i32,
}
/// Nested message and enum types in `SecretRef`.
pub mod secret_ref {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum RefAsType {
        Unspecified = 0,
        Text = 1,
        /// AS FILE
        File = 2,
    }
    impl RefAsType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "UNSPECIFIED",
                Self::Text => "TEXT",
                Self::File => "FILE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "TEXT" => Some(Self::Text),
                "FILE" => Some(Self::File),
                _ => None,
            }
        }
    }
}
